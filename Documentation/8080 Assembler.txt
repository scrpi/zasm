
h2	8080 Assembler

p	zasm can assemble source which is the historic 8080 assembler format. zasm expects your source to be 7-bit ascii, though utf-8 encoding is possible. Line ending should be '\n'.
	
p	ZASM supports most of a typical 8080 assembler source files, but only as an addition to it's standard Z80 source handling. It expects one instruction per line, comments start with a semicolon ";" and label definitions should start in column 1. 

p	All identifiers (mnenonics, register names and directives) and label names are <u>not</u> case sensitive!

p.magenta	The 8080 assembler is provided to assemble existing source. New programs should be written in the much better readable Z80 syntax. zasm can be restricted to the 8080 instructions and register by command line option --8080.

h5	8080 code example:
pre	inpl2:  LXI     H,IBUFF         ;Input buffer addr
	        SHLD    IBUFP
	        MVI     C,0             ;Init count to zero
	
	inpli:  CALL    intt            ;Get char from console
	
	        CPI     ' '             ;Control char?
	        JC      inplc           ;Yes
	
	        CPI     DEL             ;Delete char?
	        JZ      inplb           ;Yes
	
	        CPI     'Z'+1           ;Upper case?
	        JC      inpl3           ;Yes
	        ANI     5Fh             ;No - so make upper case
	
	inpl3:  MOV     M,A             ;Into buffer
	        MVI     A,IBL           ;Buffer size
	        CMP     C               ;Full?
	        JZ      inpli           ;Yes, loop
	        MOV     A,M             ;Get char from buffer
	        INX     H               ;Incr pointer
	        INR     C               ; and count
	inple:  CALL    OUTT            ;Show char
	        JMP     inpli           ;Next char


// –––––––––––––––––––––––––––––––––
h4	8080 assembler directives

p	8080 assembler directives may start in column 1 or may be preceded with some spaces. The code generating pseudo instructions DB, DW and DS must be preceded by some space like any real 8080 instruction. They mostly behave like their Z80 counterparts.

p	zasm knows the following 8080 assembler directives and pseudo instructions:
	
h5	ORG <nnnn>
p	Set the logical origin (code address) for the following code.
pre	ORG 0C000h

h5	END
p	Define the logical end of your source. END is optional.

h5	IF .. ENDIF
p	Exclude or include some source depending on the value of a condition. 
	IF and ENDIF are just an alias to #IF and #ENDIF and therefore may be used interchangeable with #IF, #ELIF, #ELSE and #ENDIF.
pre	IF option_foo=1		
	  IF option_bar
	    foo equ $+1
	  ENDIF
	#endif					; must start in col 1
	
h5	DB
p	Insert bytes. DB is handled like 'dm' in Z80 assembler: You can put in strings here which may be enclosed in ' or ".
pre		DB	lf,cr,'Hello You: ',0

h5	DW
p	Insert words. Like 'dw' in Z80 assembler.
pre		DW	foo, bar*2, stuff+33, 0xFFFF

h5	DS
p	Insert space. Like 'ds' in Z80 assembler.
pre		DS	66h - $
	

// –––––––––––––––––––––––––––––––––
h4	Labels
h5	EQU
p	Assign a value to a label. Behaves like 'equ' for the Z80 assembler, except that there may (but should not) be some white space before the label name.

pre	foobar	equ	5
	  foo	equ 2
	  bar	equ foobar - FOO

p	In contrast to the Z80 assembler, label names are <u>not</u> case sensitive!
p	Register names can be used as label names. (but, really really, shouldn't.) 
	The names for the 8080 assembler directives are not allowed for label names.
p	Code position labels <u>must</u> start in column 1 and may be followed by a colon ':' (optional).

pre	start:	CALL  fii
	        CPI   'Z'
	        JC    in3
			...
	in3:	...

// –––––––––––––––––––––––––––––––––
h4	Expressions

p	Basically all possibilities of the Z80 assembler are allowed, because the expression parser of the Z80 assembler is used.
p	In addition the 8080 assembler knows the keywords AND, OR and XOR, which act as an alias for '&' '|' and '^'.



