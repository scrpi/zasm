
//-----------------------------------------------------------------
h3	#data

pre	#data <start>,<size>

p	This directive declares an area of ram to be used for variables etc. #data behaves much like #code, except that the contents of this segment is not stored into the output file. The segment is used merely to define labels, presumably in ram.

p	For a simple rom written entirely in assembler you probably need only one data segment, or even no data segment at all, if you just define the variables' addresses with the pseudo instruction equ.

p	The following example might be used if you include c source:
p	It defines two data segments named _DATA and _INITIALIZED, which is where the c compiler stores uninitialized and initialized variables. In this example these segments are fittet into the 'printer buffer' of the ZX Spectrum, a mostly unused area (except for printing) of 256 bytes. See how the definition of the _INITIALIZED segment directly appends to _DATA and asserts that the combined length does not exceed 256 bytes. The expression <tt>0x100 – (_INITIALIZED – _DATA)</tt> uses the start addresses of the segments for which zasm automatically defines labels.

h5	Example:
pre	#data 	_DATA, printer_buffer							; uninitialized data
	#data 	_INITIALIZED, *, 0x100 - (_INITIALIZED-_DATA)	; data initialized from _INITIALIZER
	 
	#data 	_HEAP, code_end		; heap:
	__sdcc_heap_start:	 		; --> sdcc _malloc.c
			ds	ram_end-$-1		; add all unused memory to the heap
	__sdcc_heap_end: 			; --> sdcc _malloc.c
			ds 	1



p	<br>A data segment can be re-entered by using the #data directive with the name only or by using the .area pseudo opcode:

pre	#data _DATA			; following code will be stored in data segment _DATA
pre		  .area _DATA	; following code will be stored in segment _DATA   (sdcc syntax)

p	<br>You can switch between segments whenever you need to allocate storage space for variables in your source. 

h5	Example:
pre	...
	#data	_DATA		; switch context to data segment _DATA
	foo		defs	4
	bar		defs	2
	fuzzy	defs	$20
	;
	#code	_CODE		; switch context back to code segment _CODE
	...

p	<br>The c compiler uses the code segment _INITIALIZER to store the initial data of initialized variables. These are copied during system initialization to the location of _INITIALIZED. (Actually the c compiler doesn't do this. It is your job to add some code in the _GSINIT segment to do this!) So you can switch between these segments to allocate the variable in ram and add init data in rom:

h5	Example:
pre	...
	#data	_INITIALIZED		
	foo		defs	2		; allocate space in ram
	#code	_INITIALIZER
			defw	4711	; store init t´data in rom. SIZE AND POSITION MUST MATCH!
	#code	_CODE
	...
	





