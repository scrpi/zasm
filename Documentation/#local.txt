


//-----------------------------------------------------------------
h3	#local, #endlocal
	#local, #endlocal

p	This defines a local scope for normal label definitions. This way you can safely use 'standard' names for jump targets in included files without worrying about name collissions. You can still push labels to the global scope though. #local contexts can be nested.

h5	Example:

p	Wrap an included source file to avoid label name conflicts.
	Note: zasm does this automatically for c files, but not for assembler files:
	
pre	#local 
	#include "util/u.asm"
	#endlocal

p	<br>Define global variables from inside a #local context:

pre	#local
	boo::	ld a,0		; '::' makes 'boo' global
			.globl fax
	fax:	ret			; 'fax' is now also global
						; note: this is just a bypass around a bug in sdcc.
						; you should only use the '::' notation.
	#endlocal
	
p	Note: referenced but locally undefined labels are automatically pushed to the surrounding scope by #endlocal and will finally reach the global scope, if they were not defined in an intermediate surrounding #local scope. (note: local scopes can be nested.) There they can be picked up and resolved by the <tt><b>#includeÂ library</b></tt> directive.

p	The .globl pseudo instruction can also be used to make sure that a certain label <u>is</u> global and not accidentially defined in a surrounding #local scope.
