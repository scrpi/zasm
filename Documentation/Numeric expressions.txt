
h3	Numeric expressions

p	The assembler has an expression evaluator which supports various formats for numbers and operations with priority order. You may also use brackets, but don't start an expression for an immediate value with an opening bracket. The assembler thinks that an expression which starts with an opening bracket indicates direct memory addressing. If you really need to start an immediate value expression with brackets, precede it with the '+' monadic operator or a hash '#'.

h4	Number literals

p	Number literals are the 'number' in an expression. They can be written in a multitude of formats:

pre	12345    decimal number
	12345d   decimal number
	$1234    hexadecimal number
	1234h    hexadecimal number
	0x1234   hexadecimal number
	%1010    binary number
	1010b    binary number
	0b1010   binary number
	'a'      character literal

p	All number literals may be prefixed by a sign, either '+' or '-', which is actually handled as a monadic operator internally.

p	A character literal must be either a 7-bit ascii character or it is converted from utf-8. (note: all source files are expected to be either 7-bit ascii or utf-8 encoded.)
p	Character literals are translated to the target system's character set if the assembler directive '#charset' was used to define one. Else the character must be in range 0 to 255. If the character is not available in the target character set the assembler reports an error.
p	If the values are stored with 'defb' or similar, all values must fit in a byte each. Then characters like '€' will raise an error. If they are stored with 'defw' then '€' will be ok.

h4	Labels 
p	Of course labels can be used in expressions. Labels may refer to local or global symbols, depending on whether they were defined inside the current #local context (if any) or outside any local context. See chapter '#local' for more information.

h4	Predefined names

p	<b>'$'</b> is used to get the value of the current logical code position. It always refers to the start of a statement, e.g. to the first byte of an instruction or the postition of the first byte in a 'defb' instruction:

pre	foo:	djnz $		; jump to foo
	bar:	defb $,$,$	; stores 3x the value of bar

p	<b>'$$'</b> refers to the physical code position. For an explanation of 'physical' vs. 'logical' code position see instruction '.phase'.

p	<b>__line__</b> inserts the current line number.

p	<b>hi(NN)</b> gets the high byte of a 2-byte word. Similar to <tt>NN >> 8</tt>.
p	<b>lo(NN)</b> gets the low byte of a 2-byte word. Similar to <tt>NN & 0xFF</tt>.

p	<b>min(N1,N2)</b> gets the value of the smaller of two values.
p	<b>max(N1,N2)</b> gets the value of the bigger of two values.

p	<b>opcode(ld a,b)</b> gets the major byte of an opcode, in this case of opcode 'ld a,b'.
p	<b>defined(<name>)</b> results in 0 or 1 depending on whether the named label is already defined at this position in source.
	<i>note: use of this function in a local context may malfunction if a local name of this name is defined after this test.</i>

p	<b>target(NAME)</b>: tests whether the named #target is selected. Use this if you made it selectable for some reason in your source. Result is 0 or 1.

p	<b>segment(NAME)</b>: tests whether the named segment is the currently selected #code or #data segment. Result is 0 or 1.

	
h4	Operators
	operator priority, priority

p	The following operators are recognized and listed in order of precedence:

pre	brackets            ( ... )
	monadic operators   + - ~ !       	plus sign, minus sign, 2's complement, negation
	shifting            << >>       	shift left or right; left operand is target
	bit masking         & | ^			bitwise and, or, xor
						and or xor
	mult/div            * / %     	    multiply, divide, remainder ('\' is also recognized)
	add/sub             + -         	add, subtract
	comparisions        > < >= <= = <>	greater than etc.; result is 0 or 1
						== != eq ne 
						gt lt ge le
	boolean				&& ||			pruning
	selector			? :				pruning

p	The first argument of a pruning operator must be valid in pass 1.

p	If you used command line option '--flatops' then all operators are evaluated strictly from left to right.


h4	Built-in function 'opcode()'

p	Function 'opcode(…)' can be used to get the major byte of an opcode. This is useful if you want to poke an opcode byte into some self-modifying portions of code.

p	The 'major byte' is the first byte for most opcodes, the byte after 0xCB, 0xED, 0xDD or 0xFD for most others or the 4th byte of a 0xDD 0xCB or 0xFD 0xCB instruction.
	<i>0xDD and 0xFD are the index register prefixes.</i>
	
p	The syntax for the opcode itself is like this:

pre	nop				just the name for opcodes without argument
	ld a,b			name plus arguments which go into the opcode
	bit 3,(hl)		'3' wis part of the opcode!
	rst 8
	ld a,N
	ld a,(NN)
	ld a,(bc)
	ld a,(ix+offs)	actually you can use 'ld a,(hl)' here as well
	jr c,NN
	ex af,af'
	ld a,xh			illegals allowed

p	Currently only opcodes for the Z80 cpu are supported. The additional opcodes of the Z180 or 8080 assembler mnemonics are not recognized.



