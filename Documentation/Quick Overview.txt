

h1	Quick Overview
	overview

// –––––––––––––––––––––––––––––––––––––––––––––––––
h3	Features

p	<b class=red>zasm</b> is an assembler for the <span class=blue>Z80 CPU</span>.
	It can also assemble code for the extended instruction set of the Z180 / Hitachi HD64180, as well as code limited to the Intel 8080 e.g. for CP/M.
	<b class=red>zasm</b> can also assemble native <span class=blue>8080 assembler</span> source.
	By the help of <span class=blue>sdcc</span> zasm can include c source files. For OSX a distribution which includes a trimmed version of sdcc is available for download.
	<b class=red>zasm</b> can create binary, Intel Hex or Motorola S19 files and various special files for <span class=blue>Sinclair</span> and <span class=blue>Jupiter Ace emulators</span>:
p	<b>ZX Spectrum:</b> .sna .z80 .tap
	<b>Jupiter Ace:</b> .ace .z80¹ .tap
	<b>ZX80:</b> .o / .80 .z80¹
	<b>ZX81:</b> .p / .81 / .p81 .z80¹
p	<b class=red>zasm</b> can translate the character set for the target system, e.g. for the <span class=blue>ZX80</span> and <span class=blue>ZX81</span>.
	The list file can include <span class=blue>accumulated cpu cycles</span>.
	Various historically used syntax variants and the syntax emitted by sdcc are supported.
	Multiple code and data segments can be defined, nested conditional assembly and nested local scopes are available.
	Last not least, <b class=red>zasm</b> supports <span class=blue>macros</span>.
p.small	¹) eventually only supported by zxsp.


// –––––––––––––––––––––––––––––––––––––––––––––––––
h3	Typical invocation

p	Compile the file "emuf_rom.asm" and store a plain list file without generated opcodes and the output file in the same folder. The source file may include other files, either binary, assembler sources or c files:

pre	zasm emuf_rom.asm

p	Include generated opcodes, accumulated cpu cycles and a labels listing in the list file:

pre	zasm -uwy emuf_rom.asm

p	Assemble source for the Intel 8080 assembler:

pre	zasm --asm8080 emuf8080_rom.asm



// –––––––––––––––––––––––––––––––––––––––––––––––––
h3	Source file examples

p	The source file must be either 7-bit ascii or utf-8 encoded. If you still use a legacy encoding for your text files then this is OK if non-ascii characters occure only in comments. You just won't be able to put non-ascii characters in strings or character literals.

p	Line breaks in the source file may use any well known format, but the text files generated by zasm will use newline (character 0x0A) only.

h5	Basic source file which does not set a target. Instruction 'org' is required:

pre	; my little EMUF
	 
	; define some labels:
	anton	equ	66
	berta	equ	88
	 
	; define code:
			org	  0
	reset:	di
			jp	  _init
	 		
			org	  8
	printc:	jp	  _printc
	 
			...
	 		
	; pad file to eprom size:
			ds	0x2000 - $
			
h5	Basic source file which sets a target and uses code and data segments:

pre	; my little EMUF
	 
	#target rom
	 
	; define a data segment in ram and therein some variables:
	 
	#data _SYSVARS,0x4000
	 
	anton	data	2
	berta	data	4
	caesar	data	1
	 
	; define a code segment for an eprom:
	 
	#code _EPROM,0,0x4000
	 
	reset:	di
			jp	  _init
	 		
			org	  8
	printc:	jp	  _printc
	 
			...
			
			
			
			
			
			
			
			
			
			
			